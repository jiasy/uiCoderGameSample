local function callLater(delay, callback)
    local data = {}
    data.funcID = cc.Director:getInstance():getScheduler():scheduleScriptFunc(function()
        callback()
        cc.Director:getInstance():getScheduler():unscheduleScriptEntry(data.funcID)
    end, delay, false)
end

local Proxy = require "com.fight.model.Proxy"
local UnitView = require "com.fight.UnitView"
local EndlessImage = require "com.fight.EndlessImage"
local HPBar = require "com.fight.HPBar"

local PVEView = class("PVEView", function() return cc.Node:create() end)

PVEView.CONSTANT_ROLL_DISTANCE = 500

PVEView.EVENT_FRAME = "EVENT_FRAME"

PVEView.EVENT_POSITIVE_ROUND = "EVENT_POSITIVE_ROUND"

local unitPositions = {
    {x = 210, y = 116},
    {x = 174, y = 68},
    {x = 134, y = 140},
    {x = 90, y = 68},
    {x = 48, y = 140},    
}

function PVEView:getContent()
	return self._content
end

function PVEView:ctor(proxy)
    cc.bind(self, "event")

    local bgDistant = EndlessImage.new("image2.png")
    self:addChild(bgDistant)
    self._bgDistant = bgDistant

    local unitView = UnitView.new(proxy, "image3.png")    
    unitView:setUnitPositionIterator(function(side)
        if side then
            local i = 1
            return function() 
                        local p = unitPositions[i]
                        i = i + 1
                        return p
                    end
        else
            local offX = - unitView:getPositionX() + PVEView.CONSTANT_ROLL_DISTANCE
            local i = 1
            return function() 
                        local p = unitPositions[i]
                        local x, y = p.x, p.y
                        x = x + (320 - x) * 2 + offX
                        i = i + 1
                        return {x = x, y = y}
                    end            
        end        
    end)
    unitView:addEventListener(unitView.EVENT_REFRESH, function()
        if self._hpBar then self:removeChild(self._hpBar) end
        local hpBar = HPBar.new(200)
        hpBar:setAnchorPoint(cc.p(0.5, 0))    
        hpBar:setValueMax(100000)
        hpBar:setValue(100000)      
        hpBar:setPosition({x = 150, y = 50})
        for _, unit in ipairs(self._content:getPositiveUnits()) do
            unit:setHPBar(hpBar)
        end           
        self:addChild(hpBar)  
        self._hpBar = hpBar            
        self:_rollStart()              
    end)

    unitView:addEventListener(UnitView.EVENT_NEGATIVE_LOSE, function() 
        proxy:refresh()
    end)
    unitView:addEventListener(UnitView.EVENT_FRAME, function(event)
        self:dispatchEvent({name = PVEView.EVENT_FRAME, idx = event.idx, side = event.side})
    end)            
    self:addChild(unitView)	
    self._content = unitView

    local bgClose = EndlessImage.new("image4.png")
    self:addChild(bgClose)
    self._bgClose = bgClose

    self._proxy = proxy
end

function PVEView:_rollStart()
    for _, unit in ipairs(self._content:getPositiveUnits()) do
        unit:getArmature():getAnimation():play("pao")
    end    
    self._rollCallbackID = cc.Director:getInstance():getScheduler():scheduleScriptFunc(function()
        self:_rollUpdate(2)
    end, 0, false)
    self._rollDistance = PVEView.CONSTANT_ROLL_DISTANCE
end

function PVEView:_rollStop()
    for _, unit in ipairs(self._content:getPositiveUnits()) do
        local x, y = unit:getPosition()
        unit:setOrigin(x, y)
        unit:getArmature():getAnimation():play("zhan")
    end  
    cc.Director:getInstance():getScheduler():unscheduleScriptEntry(self._rollCallbackID)
    self._proxy:frameHandler()
end

function PVEView:_rollUpdate(step)
    if step > self._rollDistance  then step = self._rollDistance end 

    local image = self._bgDistant
    local x, y = image:getPosition()
    image:setPosition({x = x - step * 0.5, y})

    local image = self._content
    local x, y = image:getPosition()
    image:setPosition({x = x - step, y})   

    for _, unit in ipairs(self._content:getPositiveUnits()) do
        local x, y = unit:getPosition()
        unit:setPosition({x = x + step, y = y})
    end
    
    local image = self._bgClose
    local x, y = image:getPosition()
    image:setPosition({x = x - step * 1.5, y})           

    self._rollDistance = self._rollDistance - step
    if self._rollDistance == 0 then
        self:_rollStop()
    end
end

return PVEView